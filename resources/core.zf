( system calls )

: emit                         0 sys ;
: .                            1 sys ;
: tell                         2 sys ;
: reset                        128 sys ;
: _relay_on                    129 sys ;
: _relay_off                   130 sys ;
: _led_on                      131 sys ;
: _led_off                     132 sys ;
: _wifi_tcp_connect            133 sys ;
: _wifi_tcp_send_byte          134 sys ;
: _wifi_send_bytes             136 sys ;
: _wifi_read_line              137 sys ;

: relay_on _relay_on ;
: relay_off _relay_off ;
: led_on _led_on ; 
: led_off _led_off ;

: tcp_connect ( host, port -- conn_id ) _wifi_tcp_connect ;
: tcp_send_byte ( conn_id, byte -- ) _wifi_tcp_send_byte ;

( dictionary access. These are shortcuts through the primitive operations are !!, @@ and ,, )

: !    0 !! ;
: @    0 @@ ;
: ,    0 ,, ;
: #    0 ## ;

: CELL 8 ;
: CELLS CELL * ;
: ? @ . ;


( compiler state )

: [ 0 compiling ! ; immediate
: ] 1 compiling ! ;
: postpone 1 _postpone ! ; immediate


( some operators and shortcuts )

: over 1 pick ;
: +!   dup @ rot + swap ! ;
: inc  1 swap +! ;
: dec  -1 swap +! ;
: <    - <0 ;
: >    swap < ;
: <=   over over >r >r < r> r> = + ;
: >=   swap <= ;
: =0   0 = ;
: not  =0 ;
: !=   = not ;
: cr   10 emit ;
: ..   dup . ;
: here h @ ;


( memory management )

: allot  h +!  ;
: var : postpone [ ' lit , here dup 5 + , ' exit , here swap ! 5 allot ;


( 'begin' gets the current address, a jump or conditional jump back is generated
  by 'again', 'until' or 'times' )

: begin   here ; immediate
: again   ' jmp , , ; immediate
: until   ' jmp0 , , ; immediate
: times ' 1 - , ' dup , ' =0 , postpone until ; immediate


( 'if' prepares conditional jump, address will be filled in by 'else' or 'fi' )

: if      ' jmp0 , here 999 , ; immediate
: unless  ' not , postpone if ; immediate
: else    ' jmp , here 999 , swap here swap ! ; immediate
: fi      here swap ! ; immediate


( forth style 'do' and 'loop', including loop iterators 'i' and 'j' )

: i ' lit , 0 , ' pickr , ; immediate
: j ' lit , 3 , ' pickr , ; immediate
: do ' swap , ' >r , ' >r , here ; immediate
: loop+ ' r> , ' + , ' dup , ' >r , ' lit , 1 , ' pickr , ' > , ' jmp0 , , ' r> , ' drop , ' r> , ' drop , ; immediate
: loop ' lit , 1 , postpone loop+ ;  immediate


( Create string literal, puts length and address on the stack )

: s" compiling @ if ' lits , here 0 , fi here begin key dup 34 = if drop
     compiling @ if here swap - swap ! else dup here swap - fi exit else , fi
     again ; immediate

( Print string literal )

: ." compiling @ if postpone s" ' tell , else begin key dup 34 = if drop exit else emit fi again
     fi ; immediate


." Welcome to zForth, " here . ."  bytes used" cr ;


( methods for handling the dictionary )

( 'next' increases the given dictionary address by the size of the cell
  located at that address )

: next dup # + ;

( 'words' generates a list of all define words )

: name dup @ 31 & swap next dup next rot tell @ ;
: words latest @ begin name 32 emit dup 0 = until cr drop ;

: relay_on ." Relay on" _relay_on ;
: relay_off ." Relay off" _relay_off ;

(
vi: ts=3 sw=3 ft=forth
)

: wifi_send_and_get_answer _wifi_send_bytes _wifi_read_line _wifi_read_line  ; 

: wifi_at s" AT" wifi_send_and_get_answer ;
: wifi_at_gmr s" AT+GMR" wifi_send_and_get_answer ;
: wifi_at_cwlif s" AT+CWLIF" wifi_send_and_get_answer;

: wifi_print != if else ." timeouted" fi ;


: print 0 over do ." hello" loop ; 
